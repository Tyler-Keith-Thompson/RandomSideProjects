@testable import App
import XCTVapor

final class AppTests: XCTestCase {
    func testVerifyAttestation() async throws {
        let app = Application(.testing)
        defer { app.shutdown() }
        try await configure(app)

        let bodyData = try JSONSerialization.data(withJSONObject: [
            "challenge": "1234",
            "clientId": "TT.Playground",
            "keyId": "N+MzRdoICdpOkmWyYeJdQ8wt/TS4bCNbJiCgy8DEbzo=",
            "attestation": "o2NmbXRvYXBwbGUtYXBwYXR0ZXN0Z2F0dFN0bXSiY3g1Y4JZAukwggLlMIICbKADAgECAgYBiNFcZdAwCgYIKoZIzj0EAwIwTzEjMCEGA1UEAwwaQXBwbGUgQXBwIEF0dGVzdGF0aW9uIENBIDExEzARBgNVBAoMCkFwcGxlIEluYy4xEzARBgNVBAgMCkNhbGlmb3JuaWEwHhcNMjMwNjE4MDE1NDMzWhcNMjQwMzE2MDE1MDMzWjCBkTFJMEcGA1UEAwxAMzdlMzMzNDVkYTA4MDlkYTRlOTI2NWIyNjFlMjVkNDNjYzJkZmQzNGI4NmMyMzViMjYyMGEwY2JjMGM0NmYzYTEaMBgGA1UECwwRQUFBIENlcnRpZmljYXRpb24xEzARBgNVBAoMCkFwcGxlIEluYy4xEzARBgNVBAgMCkNhbGlmb3JuaWEwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATQ4bh6gTLN1BuWup0pyg4q5AuW7lnodqXMYqeqPm5Q2oZnwNsofTTSy+w41Tm52uwOrGxU3CC1sgVGOidIQCJ2o4HwMIHtMAwGA1UdEwEB/wQCMAAwDgYDVR0PAQH/BAQDAgTwMHIGCSqGSIb3Y2QIBQRlMGOkAwIBCr+JMAMCAQG/iTEDAgEAv4kyAwIBAb+JMwMCAQG/iTQaBBg5Q1VKSEI0OFU2LlRULlBsYXlncm91bmSlBgQEc2tzIL+JNgMCAQW/iTcDAgEAv4k5AwIBAL+JOgMCAQAwJAYJKoZIhvdjZAgHBBcwFb+KeAYEBDE2LjW/insHBAUyMEY2NjAzBgkqhkiG92NkCAIEJjAkoSIEIGsN7Z1R+ONOpvvGDiTwOW3xeCxMf+DQRARAFO2SBKlIMAoGCCqGSM49BAMCA2cAMGQCMBp5+E68gVQ7a/17yFURbvmdE/oSiwZaKgy9mgQOHDNwxKn1c7Kemyn2bniw5kPD1wIwF0XySGhQKYP3b4zu2X4V2F+eAB+oF8GsYYnn7vJfPzIlQjMEAK1uhxWM3bhbFEGoWQJHMIICQzCCAcigAwIBAgIQCbrF4bxAGtnUU5W8OBoIVDAKBggqhkjOPQQDAzBSMSYwJAYDVQQDDB1BcHBsZSBBcHAgQXR0ZXN0YXRpb24gUm9vdCBDQTETMBEGA1UECgwKQXBwbGUgSW5jLjETMBEGA1UECAwKQ2FsaWZvcm5pYTAeFw0yMDAzMTgxODM5NTVaFw0zMDAzMTMwMDAwMDBaME8xIzAhBgNVBAMMGkFwcGxlIEFwcCBBdHRlc3RhdGlvbiBDQSAxMRMwEQYDVQQKDApBcHBsZSBJbmMuMRMwEQYDVQQIDApDYWxpZm9ybmlhMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAErls3oHdNebI1j0Dn0fImJvHCX+8XgC3qs4JqWYdP+NKtFSV4mqJmBBkSSLY8uWcGnpjTY71eNw+/oI4ynoBzqYXndG6jWaL2bynbMq9FXiEWWNVnr54mfrJhTcIaZs6Zo2YwZDASBgNVHRMBAf8ECDAGAQH/AgEAMB8GA1UdIwQYMBaAFKyREFMzvb5oQf+nDKnl+url5YqhMB0GA1UdDgQWBBQ+410cBBmpybQx+IR01uHhV3LjmzAOBgNVHQ8BAf8EBAMCAQYwCgYIKoZIzj0EAwMDaQAwZgIxALu+iI1zjQUCz7z9Zm0JV1A1vNaHLD+EMEkmKe3R+RToeZkcmui1rvjTqFQz97YNBgIxAKs47dDMge0ApFLDukT5k2NlU/7MKX8utN+fXr5aSsq2mVxLgg35BDhveAe7WJQ5t2dyZWNlaXB0WQ5PMIAGCSqGSIb3DQEHAqCAMIACAQExDzANBglghkgBZQMEAgEFADCABgkqhkiG9w0BBwGggCSABIID6DGCBAowIAIBAgIBAQQYOUNVSkhCNDhVNi5UVC5QbGF5Z3JvdW5kMIIC8wIBAwIBAQSCAukwggLlMIICbKADAgECAgYBiNFcZdAwCgYIKoZIzj0EAwIwTzEjMCEGA1UEAwwaQXBwbGUgQXBwIEF0dGVzdGF0aW9uIENBIDExEzARBgNVBAoMCkFwcGxlIEluYy4xEzARBgNVBAgMCkNhbGlmb3JuaWEwHhcNMjMwNjE4MDE1NDMzWhcNMjQwMzE2MDE1MDMzWjCBkTFJMEcGA1UEAwxAMzdlMzMzNDVkYTA4MDlkYTRlOTI2NWIyNjFlMjVkNDNjYzJkZmQzNGI4NmMyMzViMjYyMGEwY2JjMGM0NmYzYTEaMBgGA1UECwwRQUFBIENlcnRpZmljYXRpb24xEzARBgNVBAoMCkFwcGxlIEluYy4xEzARBgNVBAgMCkNhbGlmb3JuaWEwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATQ4bh6gTLN1BuWup0pyg4q5AuW7lnodqXMYqeqPm5Q2oZnwNsofTTSy+w41Tm52uwOrGxU3CC1sgVGOidIQCJ2o4HwMIHtMAwGA1UdEwEB/wQCMAAwDgYDVR0PAQH/BAQDAgTwMHIGCSqGSIb3Y2QIBQRlMGOkAwIBCr+JMAMCAQG/iTEDAgEAv4kyAwIBAb+JMwMCAQG/iTQaBBg5Q1VKSEI0OFU2LlRULlBsYXlncm91bmSlBgQEc2tzIL+JNgMCAQW/iTcDAgEAv4k5AwIBAL+JOgMCAQAwJAYJKoZIhvdjZAgHBBcwFb+KeAYEBDE2LjW/insHBAUyMEY2NjAzBgkqhkiG92NkCAIEJjAkoSIEIGsN7Z1R+ONOpvvGDiTwOW3xeCxMf+DQRARAFO2SBKlIMAoGCCqGSM49BAMCA2cAMGQCMBp5+E68gVQ7a/17yFURbvmdE/oSiwZaKgy9mgQOHDNwxKn1c7Kemyn2bniw5kPD1wIwF0XySGhQKYP3b4zu2X4V2F+eAB+oF8GsYYnn7vJfPzIlQjMEAK1uhxWM3bhbFEGoMCgCAQQCAQEEIAOsZ0IW8+Fcdh7hpeJV8GeVNiPIs4i0RZ4T+XjXyEb0MGACAQUCAQEEWDZTODZtUkd0b3NtMkc5YTBSV3VkM293dS9tWXF4TVR5c0h3SjJRWUdnNXNmYU5rWHNDck4vbGh0MEM2dHlXVWlBOTFNY2ErdEdhV1RaM0FBRkdQeTJRPT0wDgIBBgIBAQQGQVRURVNUMA8CAQcCAQEEB3NhbmRib3gwIAIBDAIBAQQYMjAyMy0wNi0xOVQwMTo1NDozMy4EJjU3MVowIAIBFQIBAQQYMjAyMy0wOS0xN1QwMTo1NDozMy41NzFaAAAAAAAAoIAwggOtMIIDVKADAgECAhB9zZlRLYx9zRYL3g44gXpCMAoGCCqGSM49BAMCMHwxMDAuBgNVBAMMJ0FwcGxlIEFwcGxpY2F0aW9uIEludGVncmF0aW9uIENBIDUgLSBHMTEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMB4XDTIzMDMwODE1MjkxN1oXDTI0MDQwNjE1MjkxNlowWjE2MDQGA1UEAwwtQXBwbGljYXRpb24gQXR0ZXN0YXRpb24gRnJhdWQgUmVjZWlwdCBTaWduaW5nMRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABNqYKGfvXdIprBu9vpxxCe0/10ulGXkYsERsGjIv5lZXSez5sbvVBHMCbOaU2B3TyAjdgn4es8v78f0qKeJ/EP2jggHYMIIB1DAMBgNVHRMBAf8EAjAAMB8GA1UdIwQYMBaAFNkX/ktnkDhLkvTbztVXgBQLjz3JMEMGCCsGAQUFBwEBBDcwNTAzBggrBgEFBQcwAYYnaHR0cDovL29jc3AuYXBwbGUuY29tL29jc3AwMy1hYWljYTVnMTAxMIIBHAYDVR0gBIIBEzCCAQ8wggELBgkqhkiG92NkBQEwgf0wgcMGCCsGAQUFBwICMIG2DIGzUmVsaWFuY2Ugb24gdGhpcyBjZXJ0aWZpY2F0ZSBieSBhbnkgcGFydHkgYXNzdW1lcyBhY2NlcHRhbmNlIG9mIHRoZSB0aGVuIGFwcGxpY2FibGUgc3RhbmRhcmQgdGVybXMgYW5kIGNvbmRpdGlvbnMgb2YgdXNlLCBjZXJ0aWZpY2F0ZSBwb2xpY3kgYW5kIGNlcnRpZmljYXRpb24gcHJhY3RpY2Ugc3RhdGVtZW50cy4wNQYIKwYBBQUHAgEWKWh0dHA6Ly93d3cuYXBwbGUuY29tL2NlcnRpZmljYXRlYXV0aG9yaXR5MB0GA1UdDgQWBBRM8aefEGGKGjlkzG3m2zsHYpd2vTAOBgNVHQ8BAf8EBAMCB4AwDwYJKoZIhvdjZAwPBAIFADAKBggqhkjOPQQDAgNHADBEAiB622TidZxPBRb/LEnb85AsLxEspneOUIIKdIOcrDub7AIgRTXHYCoyQE35KoFn/Je2cuAJmdQpipbnBcvtCXAXUI0wggL5MIICf6ADAgECAhBW+4PUK/+NwzeZI7Varm69MAoGCCqGSM49BAMDMGcxGzAZBgNVBAMMEkFwcGxlIFJvb3QgQ0EgLSBHMzEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMB4XDTE5MDMyMjE3NTMzM1oXDTM0MDMyMjAwMDAwMFowfDEwMC4GA1UEAwwnQXBwbGUgQXBwbGljYXRpb24gSW50ZWdyYXRpb24gQ0EgNSAtIEcxMSYwJAYDVQQLDB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASSzmO9fYaxqygKOxzhr/sElICRrPYx36bLKDVvREvhIeVX3RKNjbqCfJW+Sfq+M8quzQQZ8S9DJfr0vrPLg366o4H3MIH0MA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAUu7DeoVgziJqkipnevr3rr9rLJKswRgYIKwYBBQUHAQEEOjA4MDYGCCsGAQUFBzABhipodHRwOi8vb2NzcC5hcHBsZS5jb20vb2NzcDAzLWFwcGxlcm9vdGNhZzMwNwYDVR0fBDAwLjAsoCqgKIYmaHR0cDovL2NybC5hcHBsZS5jb20vYXBwbGVyb290Y2FnMy5jcmwwHQYDVR0OBBYEFNkX/ktnkDhLkvTbztVXgBQLjz3JMA4GA1UdDwEB/wQEAwIBBjAQBgoqhkiG92NkBgIDBAIFADAKBggqhkjOPQQDAwNoADBlAjEAjW+mn6Hg5OxbTnOKkn89eFOYj/TaH1gew3VK/jioTCqDGhqqDaZkbeG5k+jRVUztAjBnOyy04eg3B3fL1ex2qBo6VTs/NWrIxeaSsOFhvoBJaeRfK6ls4RECqsxh2Ti3c0owggJDMIIByaADAgECAggtxfyI0sVLlTAKBggqhkjOPQQDAzBnMRswGQYDVQQDDBJBcHBsZSBSb290IENBIC0gRzMxJjAkBgNVBAsMHUFwcGxlIENlcnRpZmljYXRpb24gQXV0aG9yaXR5MRMwEQYDVQQKDApBcHBsZSBJbmMuMQswCQYDVQQGEwJVUzAeFw0xNDA0MzAxODE5MDZaFw0zOTA0MzAxODE5MDZaMGcxGzAZBgNVBAMMEkFwcGxlIFJvb3QgQ0EgLSBHMzEmMCQGA1UECwwdQXBwbGUgQ2VydGlmaWNhdGlvbiBBdXRob3JpdHkxEzARBgNVBAoMCkFwcGxlIEluYy4xCzAJBgNVBAYTAlVTMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEmOkvPUBypO2TInKBExzdEJXxxaNOcdwUFtkO5aYFKndke19OONO7HES1f/UftjJiXcnphFtPME8RWgD9WFgMpfUPLE0HRxN12peXl28xXO0rnXsgO9i5VNlemaQ6UQoxo0IwQDAdBgNVHQ4EFgQUu7DeoVgziJqkipnevr3rr9rLJKswDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCAQYwCgYIKoZIzj0EAwMDaAAwZQIxAIPpwcQWXhpdNBjZ7e/0bA4ARku437JGEcUP/eZ6jKGma87CA9Sc9ZPGdLhq36ojFQIwbWaKEMrUDdRPzY1DPrSKY6UzbuNt2he3ZB/IUyb5iGJ0OQsXW8tRqAzoGAPnorIoAAAxgf0wgfoCAQEwgZAwfDEwMC4GA1UEAwwnQXBwbGUgQXBwbGljYXRpb24gSW50ZWdyYXRpb24gQ0EgNSAtIEcxMSYwJAYDVQQLDB1BcHBsZSBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTETMBEGA1UECgwKQXBwbGUgSW5jLjELMAkGA1UEBhMCVVMCEH3NmVEtjH3NFgveDjiBekIwDQYJYIZIAWUDBAIBBQAwCgYIKoZIzj0EAwIERzBFAiB5S8HTsLT+0UGcwra1WigveuRGiKRaQ4a13mOWPiZhEgIhAM1Kb6FZMVbquLH9GXBpP+7upydF08u4amoqeFZc5TprAAAAAAAAaGF1dGhEYXRhWKTNTNSMmyL/psDaCfpkIiVJ0tooMUtEOSm08ey0S5oCOUAAAAAAYXBwYXR0ZXN0ZGV2ZWxvcAAgN+MzRdoICdpOkmWyYeJdQ8wt/TS4bCNbJiCgy8DEbzqlAQIDJiABIVgg0OG4eoEyzdQblrqdKcoOKuQLlu5Z6HalzGKnqj5uUNoiWCCGZ8DbKH000svsONU5udrsDqxsVNwgtbIFRjonSEAidg==",
//            Assertion base64: omlzaWduYXR1cmVYRzBFAiAIJjfuEj26r5h0iNtEoZLyG6rVxD8hXgKKrxdtC4QFGwIhAIrxNJDl4yx7ulHR/tRRsX/U10qJbxQlYNJLwBQ6I5AvcWF1dGhlbnRpY2F0b3JEYXRhWCXNTNSMmyL/psDaCfpkIiVJ0tooMUtEOSm08ey0S5oCOUAAAAAB
        ])

        try app.test(.POST, "verifyAttestation",
                     headers: [
                        "Content-Type": "application/json"
                     ],
                     body: ByteBuffer(data: bodyData), afterResponse: { res in
            XCTAssertEqual(res.status, .ok)
//            XCTAssertEqual(res.body.string, "Hello, world!")
        })
    }

    func testVerifyAssertion() async throws {
        let app = Application(.testing)
        defer { app.shutdown() }
        try await configure(app)

        let bodyData = try JSONSerialization.data(withJSONObject: [
            "challenge": "1234",
            "clientId": "TT.Playground",
            "keyId": "N+MzRdoICdpOkmWyYeJdQ8wt/TS4bCNbJiCgy8DEbzo=",
            "clientData": Data([49, 50, 51, 52]).base64EncodedString(),
            "assertion": "omlzaWduYXR1cmVYRzBFAiAIJjfuEj26r5h0iNtEoZLyG6rVxD8hXgKKrxdtC4QFGwIhAIrxNJDl4yx7ulHR/tRRsX/U10qJbxQlYNJLwBQ6I5AvcWF1dGhlbnRpY2F0b3JEYXRhWCXNTNSMmyL/psDaCfpkIiVJ0tooMUtEOSm08ey0S5oCOUAAAAAB"
        ] as [String : Any])

        try app.test(.POST, "verifyAssertion",
                     headers: [
                        "Content-Type": "application/json"
                     ],
                     body: ByteBuffer(data: bodyData), afterResponse: { res in
            XCTAssertEqual(res.status, .ok)
//            XCTAssertEqual(res.body.string, "Hello, world!")
        })
    }
}
